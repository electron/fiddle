version: 2.1

orbs:
  github: circleci/github-cli@2.2.0
  node: circleci/node@5.1.0

executors:
  linux:
    docker:
      - image: cimg/base:stable
  macos:
    macos:
      xcode: '13.4.0'
    resource_class: macos.x86.medium.gen2
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium
      shell: bash.exe

commands:
  install:
    steps:
      - run: git config --global core.autocrlf input
      - node/install:
          node-version: '18.4.0'
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            - v1-dependencies-{{ arch }}
      - run: npm install --global yarn
      - run: yarn install --frozen-lockfile
      - run: yarn run lint
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}

jobs:
  test:
    parameters:
      os:
        type: executor
      arch:
        type: enum
        enum: [ 'x64', 'arm64' ]
    executor: << parameters.os >>
    steps:
      - install
      - run: yarn test:ci
  build:
    parameters:
      os:
        type: executor
      arch:
        type: enum
        enum: [ 'x64', 'arm64', 'ia32', 'armv7l' ]
    executor: << parameters.os >>
    environment:
      ARCH: << parameters.arch >>
    steps:
      - install
      - when:
          condition:
            equal: [ 'macos', << parameters.os >> ]
          steps:
            - run: chmod +x tools/add-macos-cert.sh && ./tools/add-macos-cert.sh
            #   MACOS_CERT_P12, MACOS_CERT_PASSWORD
      - when:
          condition:
            equal: [ 'windows', << parameters.os >> ]
          steps:
            - run: echo "load .pfx file from base64 and write it to the repo"
            - run: $env:WINDOWS_CODESIGN_FILE = node add-windows-cert.js
      - run: npx yarn make --arch=$ARCH
      #   APPLE_ID, APPLE_ID_PASSWORD, GITHUB_TOKEN, WINDOWS_CODESIGN_FILE, WINDOWS_CODESIGN_PASSWORD
      - store_artifacts:
          path: out/*

workflows:
  test-macos:
    jobs:
      - test:
          matrix:
            parameters:
              os: [ macos ]
              arch: [ x64, arm64 ]
  test-windows:
    jobs:
      - test:
          matrix:
            parameters:
              os: [ windows ]
              arch: [ x64, arm64 ]
  test-linux:
    jobs:
      - test:
          matrix:
            parameters:
              os: [ linux ]
              arch: [ x64, arm64 ]
  #  BUILD: Only run this when manually triggered
  build-macos:
    when:
      and:
        - equal: [ << pipeline.git.branch >>, 'main' ]
        - equal: [ << pipeline.git.tag >>, '/.*/' ]
    jobs:
      - test:
          matrix:
            parameters:
              os: [ macos ]
              arch: [ x64, arm64 ]
  build-windows:
    when:
      and:
        - equal: [ << pipeline.git.branch >>, 'main' ]
        - equal: [ << pipeline.git.tag >>, '/.*/' ]
    jobs:
      - test:
          matrix:
            parameters:
              os: [ windows ]
              arch: [ x64, ia32 ]
  build-linux:
    when:
      and:
        - equal: [ << pipeline.git.branch >>, 'main' ]
        - equal: [ << pipeline.git.tag >>, '/.*/' ]
    jobs:
      - test:
          matrix:
            parameters:
              os: [ linux ]
              arch: [ x64, arm64, armv7l ]
      # - github/release:
      #     context:
      #       - GITHUB_TOKEN
      #     filters:
      #       tags:
      #         only:
      #           - /^v[0-9]+(\.[0-9]+)*$/
      #     requires:
      #       - build-macos
      #       - build-windows
      #       - build-linux
      #     tag: << pipeline.parameters.tag >>
      #     title: << pipeline.parameters.tag >>
      #     draft: true
      #     files: |
      #       out/**/*.deb
      #       out/**/*.dmg
      #       out/**/*setup*.exe
      #       out/**/*.nupkg
      #       out/**/*.rpm
      #       out/**/*.zip
      #       out/**/RELEASES
