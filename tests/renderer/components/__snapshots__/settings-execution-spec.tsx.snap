// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExecutionSettings component renders 1`] = `
<div>
  <h2>
    Execution
  </h2>
  <Blueprint3.Callout>
    These advanced settings control how Electron Fiddle executes your fiddles.
  </Blueprint3.Callout>
  <br />
  <Blueprint3.Callout>
    <Blueprint3.FormGroup
      label="Whenever Electron runs, it creates a user data directory for cookies, the cache,
      and various other things that it needs to keep around. Since fiddles are usually
      just run once, we delete this directory after your fiddle exits. Enable this
      setting to keep the user data directories around."
    >
      <Blueprint3.Checkbox
        label="Do not delete user data directories."
        onChange={[Function]}
      />
    </Blueprint3.FormGroup>
  </Blueprint3.Callout>
  <br />
  <Blueprint3.Callout>
    <Blueprint3.FormGroup
      label="There are some flags that Electron uses to log extra information both internally
      and through Chromium. Enable this option to make Fiddle produce those logs."
    >
      <p>
        Enabling advanced Electron logging will set the
         
        <code>
          ELECTRON_ENABLE_LOGGING
        </code>
        ,
        <code>
          ELECTRON_DEBUG_NOTIFICATION
        </code>
        , and
         
        <code>
          ELECTRON_ENABLE_STACK_DUMPING
        </code>
         environment variables to true. See
         
        <a
          href="https://www.electronjs.org/docs/api/environnment-variables"
        >
          documentation
        </a>
         
        for more information about what they do.
      </p>
      <Blueprint3.Checkbox
        label="Enable advanced Electron logging."
        onChange={[Function]}
      />
    </Blueprint3.FormGroup>
  </Blueprint3.Callout>
  <br />
  <Blueprint3.Callout>
    <Blueprint3.FormGroup>
      <p>
        Electron allows starting the executable with
         
        <a
          href="https://www.electronjs.org/docs/api/command-line-switches"
        >
          user-provided flags
        </a>
        , such as 
        <code>
          --js-flags=--expose-gc
        </code>
        . Those can be added here as bar-separated (|) flags to run when you start your Fiddles.
      </p>
      <br />
      <Blueprint3.InputGroup
        onChange={[Function]}
        placeholder="--js-flags=--expose-gc|--lang=es"
        value=""
      />
    </Blueprint3.FormGroup>
  </Blueprint3.Callout>
  <br />
  <Blueprint3.Callout>
    <Blueprint3.FormGroup>
      <p>
        Electron allows starting the executable with
         
        <a
          href="https://www.electronjs.org/docs/api/environment-variables"
        >
          user-provided environment variables
        </a>
        , such as
         
        <code>
          NODE_OPTIONS="--no-warnings --max-old-space-size=2048"
        </code>
        . Those can be added here as bar-separated (|) variables to run when you start your Fiddles.
      </p>
      <br />
      <Blueprint3.InputGroup
        onChange={[Function]}
        placeholder="NODE_OPTIONS=\\"--no-warnings --max-old-space-size=2048\\""
        value=""
      />
    </Blueprint3.FormGroup>
  </Blueprint3.Callout>
  <br />
  <Blueprint3.Callout>
    <Blueprint3.FormGroup>
      <span
        style={
          Object {
            "marginRight": 4,
          }
        }
      >
        Electron Fiddle will install packages on runtime if they are imported within your fiddle with 
        <code>
          require
        </code>
        . It uses
         
        <a
          href="https://www.npmjs.com/"
          rel="noreferrer"
          target="_blank"
        >
          npm
        </a>
         
        as its package manager by default, but
         
        <a
          href="https://classic.yarnpkg.com/lang/en/"
          rel="noreferrer"
          target="_blank"
        >
          Yarn
        </a>
         
        is also available.
      </span>
      <Blueprint3.RadioGroup
        inline={true}
        onChange={[Function]}
      >
        <Blueprint3.Radio
          label="npm"
          value="npm"
        />
        <Blueprint3.Radio
          label="yarn"
          value="yarn"
        />
      </Blueprint3.RadioGroup>
    </Blueprint3.FormGroup>
  </Blueprint3.Callout>
</div>
`;
