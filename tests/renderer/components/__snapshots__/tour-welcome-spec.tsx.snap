// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header component renders 1`] = `
<Blueprint3.Dialog
  canOutsideClickClose={true}
  isOpen={true}
  key="welcome-tour-dialog"
>
  <div
    className="bp3-dialog-header"
  >
    <h4
      className="bp3-heading"
    >
      üôã‚Äç Hey There!
    </h4>
  </div>
  <div
    className="bp3-dialog-body"
  >
    <p>
      Welcome to Electron Fiddle! If you're new to the app, we'd like to give you a brief tour of its features.
    </p>
    <p>
      We won't show this dialog again, but you can always find the tour in the Help menu.
    </p>
  </div>
  <div
    className="bp3-dialog-footer"
  >
    <div
      className="bp3-dialog-footer-actions"
    >
      <Blueprint3.Button
        icon="cross"
        key="cancel"
        onClick={[Function]}
        text="I'll figure it out"
      />
      <Blueprint3.Button
        icon="presentation"
        key="ok"
        onClick={[Function]}
        text="Show me around"
      />
    </div>
  </div>
</Blueprint3.Dialog>
`;

exports[`Header component renders the tour once started 1`] = `
<Tour
  onStop={[Function]}
  tour={
    Set {
      Object {
        "content": <React.Fragment>
          <p>
            Electron Fiddle allows you to build little experiments and mini-apps with Electron. Each Fiddle has at least three of these files: A main script, a renderer script, a preload script, and an HTML file.
          </p>
          <p>
            If you 
            <code>
              require()
            </code>
             a module, Fiddle will install it automatically. It will also automatically provide you with autocomplete information for the 
            <code>
              electron
            </code>
             module.
          </p>
        </React.Fragment>,
        "name": "fiddle-editors",
        "selector": "div.mosaic-root",
        "title": "üìù Fiddle Editors",
      },
      Object {
        "content": <React.Fragment>
          <p>
            Electron Fiddle knows about all released Electron versions, downloading your versions automatically in the background.
          </p>
          <p>
            Open the preferences to see all available versions and delete those previously downloaded.
          </p>
        </React.Fragment>,
        "name": "select-versions",
        "selector": "button.version-chooser",
        "title": "üìá Choose an Electron Version",
      },
      Object {
        "content": <p>
          Hit this button to give your Fiddle a try and start it.
        </p>,
        "name": "button-run",
        "selector": ".button-run",
        "title": "üöÄ Run Your Fiddle",
      },
      Object {
        "content": <React.Fragment>
          <p>
            Like what you've built? You can save your Fiddle as a public GitHub Gist, allowing other users to load it by pasting the URL into the address bar. If they don't have Electron Fiddle, they can see and download your code directly from GitHub.
          </p>
          <p>
            You can also package your Fiddle as a standalone binary or as an installer from the "Tasks" menu.
          </p>
        </React.Fragment>,
        "name": "button-publish",
        "selector": ".button-publish",
        "title": "üó∫ Share Your Fiddle",
      },
      Object {
        "content": <p>
          We've finished our tour of Electron Fiddle, but if this is your first time using Electron, we could introduce you to its basics. Interested?
        </p>,
        "getButtons": [Function],
        "name": "first-time-electron",
        "selector": "div.mosaic-root",
        "title": "üëã Getting Started With Electron?",
      },
      Object {
        "content": <React.Fragment>
          <p>
            Every Electron app starts with a main script, very similar to how a Node.js application is started. The main script runs in the "main process". To display a user interface, the main process creates renderer processes ‚Äì¬†usually in the form of windows, which Electron calls ¬†
            <code>
              BrowserWindow
            </code>
            .
          </p>
          <p>
            To get started, pretend that the main process is just like a Node.js process. All APIs and features found in Electron are accessible through the 
            <code>
              electron
            </code>
             module, which can be required like any other Node.js module.
          </p>
          <p>
            The default fiddle creates a new 
            <code>
              BrowserWindow
            </code>
             and loads an HTML file.
          </p>
        </React.Fragment>,
        "name": "main-editor",
        "selector": "div.mosaic-window.main",
        "title": "üìù Main Script",
      },
      Object {
        "content": <p>
          In the default fiddle, this HTML file is loaded in the ¬†
          <code>
            BrowserWindow
          </code>
          . Any HTML, CSS, or JavaScript that works in a browser will work here, too. In addition, Electron allows you to execute Node.js code. Take a close look at the ¬†
          <code>
            &lt;script /&gt;
          </code>
           tag and notice how we can call
           
          <code>
            require()
          </code>
           like we would in Node.js.
        </p>,
        "name": "html-editor",
        "selector": "div.mosaic-window.html",
        "title": "üìù HTML",
      },
      Object {
        "content": <React.Fragment>
          <p>
            This is the script we just required from the HTML file. In here, you can do anything that works in Node.js 
            <i>
              and
            </i>
             anything that works in a browser.
          </p>
          <p>
            By the way: If you want to use an 
            <code>
              npm
            </code>
             module here, just ¬†
            <code>
              require
            </code>
             it. Electron Fiddle will automatically detect that you requested a module and install it as soon as you run your fiddle.
          </p>
        </React.Fragment>,
        "name": "renderer-editor",
        "selector": "div.mosaic-window.renderer",
        "title": "üìù  Renderer Script",
      },
    }
  }
/>
`;
