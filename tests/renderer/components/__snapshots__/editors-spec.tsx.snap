// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Editors component does not render toolbar controls if only one editor exists 1`] = `
<div>
  <div>
    <h5>
      main.js
    </h5>
  </div>
  <div />
  <div
    className="mosaic-controls"
  />
</div>
`;

exports[`Editors component renders 1`] = `
<div
  className="focused__undefined mosaic mosaic-drop-target"
>
  <div
    className="mosaic-root"
  >
    <div
      className="mosaic-tile"
      key="main.js"
      style={
        Object {
          "bottom": "50%",
          "left": "0%",
          "right": "50%",
          "top": "0%",
        }
      }
    >
      <div
        className="mosaic-window mosaic-drop-target main.js"
      >
        <div
          className="mosaic-window-toolbar draggable"
        >
          <div>
            <div>
              <h5>
                Main Process (main.js)
              </h5>
            </div>
            <div />
            <div
              className="mosaic-controls"
            >
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-maximize"
                  icon="maximize"
                >
                  <svg
                    data-icon="maximize"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      maximize
                    </desc>
                    <path
                      d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-cross"
                  icon="cross"
                >
                  <svg
                    data-icon="cross"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      cross
                    </desc>
                    <path
                      d="M9.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L8 6.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L6.59 8 3.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71L8 9.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L9.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div
          className="mosaic-window-body"
        >
          Editor
        </div>
        <div
          className="mosaic-window-body-overlay"
          onClick={[Function]}
        />
        <div
          className="mosaic-window-additional-actions-bar"
        />
        <div
          className="mosaic-preview"
        >
          <div
            className="mosaic-window-toolbar"
          >
            <div
              className="mosaic-window-title"
            >
              Main Process (main.js)
            </div>
          </div>
          <div
            className="mosaic-window-body"
          >
            <h4>
              Main Process (main.js)
            </h4>
            <span
              className="bp3-icon bp3-icon-application"
              icon="application"
            >
              <svg
                data-icon="application"
                height={72}
                viewBox="0 0 20 20"
                width={72}
              >
                <desc>
                  application
                </desc>
                <path
                  d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </div>
        </div>
        <div
          className="drop-target-container"
        >
          <div
            className="drop-target top"
          />
          <div
            className="drop-target bottom"
          />
          <div
            className="drop-target left"
          />
          <div
            className="drop-target right"
          />
        </div>
      </div>
    </div>
    <div
      className="mosaic-split -column"
      onMouseDown={[Function]}
      style={
        Object {
          "bottom": "0%",
          "left": "0%",
          "right": "50%",
          "top": "50%",
        }
      }
    >
      <div
        className="mosaic-split-line"
      />
    </div>
    <div
      className="mosaic-tile"
      key="renderer.js"
      style={
        Object {
          "bottom": "0%",
          "left": "0%",
          "right": "50%",
          "top": "50%",
        }
      }
    >
      <div
        className="mosaic-window mosaic-drop-target renderer.js"
      >
        <div
          className="mosaic-window-toolbar draggable"
        >
          <div>
            <div>
              <h5>
                Renderer Process (renderer.js)
              </h5>
            </div>
            <div />
            <div
              className="mosaic-controls"
            >
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-maximize"
                  icon="maximize"
                >
                  <svg
                    data-icon="maximize"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      maximize
                    </desc>
                    <path
                      d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-cross"
                  icon="cross"
                >
                  <svg
                    data-icon="cross"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      cross
                    </desc>
                    <path
                      d="M9.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L8 6.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L6.59 8 3.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71L8 9.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L9.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div
          className="mosaic-window-body"
        >
          Editor
        </div>
        <div
          className="mosaic-window-body-overlay"
          onClick={[Function]}
        />
        <div
          className="mosaic-window-additional-actions-bar"
        />
        <div
          className="mosaic-preview"
        >
          <div
            className="mosaic-window-toolbar"
          >
            <div
              className="mosaic-window-title"
            >
              Renderer Process (renderer.js)
            </div>
          </div>
          <div
            className="mosaic-window-body"
          >
            <h4>
              Renderer Process (renderer.js)
            </h4>
            <span
              className="bp3-icon bp3-icon-application"
              icon="application"
            >
              <svg
                data-icon="application"
                height={72}
                viewBox="0 0 20 20"
                width={72}
              >
                <desc>
                  application
                </desc>
                <path
                  d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </div>
        </div>
        <div
          className="drop-target-container"
        >
          <div
            className="drop-target top"
          />
          <div
            className="drop-target bottom"
          />
          <div
            className="drop-target left"
          />
          <div
            className="drop-target right"
          />
        </div>
      </div>
    </div>
    <div
      className="mosaic-split -row"
      onMouseDown={[Function]}
      style={
        Object {
          "bottom": "0%",
          "left": "50%",
          "right": "0%",
          "top": "0%",
        }
      }
    >
      <div
        className="mosaic-split-line"
      />
    </div>
    <div
      className="mosaic-tile"
      key="preload.js"
      style={
        Object {
          "bottom": "50%",
          "left": "50%",
          "right": "0%",
          "top": "0%",
        }
      }
    >
      <div
        className="mosaic-window mosaic-drop-target preload.js"
      >
        <div
          className="mosaic-window-toolbar draggable"
        >
          <div>
            <div>
              <h5>
                Preload (preload.js)
              </h5>
            </div>
            <div />
            <div
              className="mosaic-controls"
            >
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-maximize"
                  icon="maximize"
                >
                  <svg
                    data-icon="maximize"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      maximize
                    </desc>
                    <path
                      d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-cross"
                  icon="cross"
                >
                  <svg
                    data-icon="cross"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      cross
                    </desc>
                    <path
                      d="M9.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L8 6.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L6.59 8 3.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71L8 9.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L9.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div
          className="mosaic-window-body"
        >
          Editor
        </div>
        <div
          className="mosaic-window-body-overlay"
          onClick={[Function]}
        />
        <div
          className="mosaic-window-additional-actions-bar"
        />
        <div
          className="mosaic-preview"
        >
          <div
            className="mosaic-window-toolbar"
          >
            <div
              className="mosaic-window-title"
            >
              Preload (preload.js)
            </div>
          </div>
          <div
            className="mosaic-window-body"
          >
            <h4>
              Preload (preload.js)
            </h4>
            <span
              className="bp3-icon bp3-icon-application"
              icon="application"
            >
              <svg
                data-icon="application"
                height={72}
                viewBox="0 0 20 20"
                width={72}
              >
                <desc>
                  application
                </desc>
                <path
                  d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </div>
        </div>
        <div
          className="drop-target-container"
        >
          <div
            className="drop-target top"
          />
          <div
            className="drop-target bottom"
          />
          <div
            className="drop-target left"
          />
          <div
            className="drop-target right"
          />
        </div>
      </div>
    </div>
    <div
      className="mosaic-split -column"
      onMouseDown={[Function]}
      style={
        Object {
          "bottom": "0%",
          "left": "50%",
          "right": "0%",
          "top": "50%",
        }
      }
    >
      <div
        className="mosaic-split-line"
      />
    </div>
    <div
      className="mosaic-tile"
      key="index.html"
      style={
        Object {
          "bottom": "25%",
          "left": "50%",
          "right": "0%",
          "top": "50%",
        }
      }
    >
      <div
        className="mosaic-window mosaic-drop-target index.html"
      >
        <div
          className="mosaic-window-toolbar draggable"
        >
          <div>
            <div>
              <h5>
                HTML (index.html)
              </h5>
            </div>
            <div />
            <div
              className="mosaic-controls"
            >
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-maximize"
                  icon="maximize"
                >
                  <svg
                    data-icon="maximize"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      maximize
                    </desc>
                    <path
                      d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-cross"
                  icon="cross"
                >
                  <svg
                    data-icon="cross"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      cross
                    </desc>
                    <path
                      d="M9.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L8 6.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L6.59 8 3.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71L8 9.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L9.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div
          className="mosaic-window-body"
        >
          Editor
        </div>
        <div
          className="mosaic-window-body-overlay"
          onClick={[Function]}
        />
        <div
          className="mosaic-window-additional-actions-bar"
        />
        <div
          className="mosaic-preview"
        >
          <div
            className="mosaic-window-toolbar"
          >
            <div
              className="mosaic-window-title"
            >
              HTML (index.html)
            </div>
          </div>
          <div
            className="mosaic-window-body"
          >
            <h4>
              HTML (index.html)
            </h4>
            <span
              className="bp3-icon bp3-icon-application"
              icon="application"
            >
              <svg
                data-icon="application"
                height={72}
                viewBox="0 0 20 20"
                width={72}
              >
                <desc>
                  application
                </desc>
                <path
                  d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </div>
        </div>
        <div
          className="drop-target-container"
        >
          <div
            className="drop-target top"
          />
          <div
            className="drop-target bottom"
          />
          <div
            className="drop-target left"
          />
          <div
            className="drop-target right"
          />
        </div>
      </div>
    </div>
    <div
      className="mosaic-split -column"
      onMouseDown={[Function]}
      style={
        Object {
          "bottom": "0%",
          "left": "50%",
          "right": "0%",
          "top": "75%",
        }
      }
    >
      <div
        className="mosaic-split-line"
      />
    </div>
    <div
      className="mosaic-tile"
      key="styles.css"
      style={
        Object {
          "bottom": "0%",
          "left": "50%",
          "right": "0%",
          "top": "75%",
        }
      }
    >
      <div
        className="mosaic-window mosaic-drop-target styles.css"
      >
        <div
          className="mosaic-window-toolbar draggable"
        >
          <div>
            <div>
              <h5>
                Stylesheet (styles.css)
              </h5>
            </div>
            <div />
            <div
              className="mosaic-controls"
            >
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-maximize"
                  icon="maximize"
                >
                  <svg
                    data-icon="maximize"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      maximize
                    </desc>
                    <path
                      d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
              <button
                className="bp3-button bp3-small"
                onBlur={[Function]}
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                type="button"
              >
                <span
                  className="bp3-icon bp3-icon-cross"
                  icon="cross"
                >
                  <svg
                    data-icon="cross"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      cross
                    </desc>
                    <path
                      d="M9.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L8 6.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L6.59 8 3.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71L8 9.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L9.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div
          className="mosaic-window-body"
        >
          Editor
        </div>
        <div
          className="mosaic-window-body-overlay"
          onClick={[Function]}
        />
        <div
          className="mosaic-window-additional-actions-bar"
        />
        <div
          className="mosaic-preview"
        >
          <div
            className="mosaic-window-toolbar"
          >
            <div
              className="mosaic-window-title"
            >
              Stylesheet (styles.css)
            </div>
          </div>
          <div
            className="mosaic-window-body"
          >
            <h4>
              Stylesheet (styles.css)
            </h4>
            <span
              className="bp3-icon bp3-icon-application"
              icon="application"
            >
              <svg
                data-icon="application"
                height={72}
                viewBox="0 0 20 20"
                width={72}
              >
                <desc>
                  application
                </desc>
                <path
                  d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </div>
        </div>
        <div
          className="drop-target-container"
        >
          <div
            className="drop-target top"
          />
          <div
            className="drop-target bottom"
          />
          <div
            className="drop-target left"
          />
          <div
            className="drop-target right"
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="drop-target-container"
  >
    <div
      className="drop-target top"
    />
    <div
      className="drop-target bottom"
    />
    <div
      className="drop-target left"
    />
    <div
      className="drop-target right"
    />
  </div>
</div>
`;

exports[`Editors component renders a toolbar 1`] = `
<div>
  <div>
    <h5>
      main.js
    </h5>
  </div>
  <div />
  <div
    className="mosaic-controls"
  >
    <React.Fragment>
      <MaximizeButton
        appState={
          StateMock {
            "Bisector": BisectorMock {
              "calculatePivot": [MockFunction],
              "continue": [MockFunction],
              "getCurrentVersion": [MockFunction],
            },
            "acceleratorsToBlock": Array [],
            "activeGistAction": "none",
            "addAcceleratorToBlock": [MockFunction],
            "addLocalVersion": [MockFunction],
            "channelsToShow": Array [],
            "clearConsole": [MockFunction],
            "closedPanels": Object {},
            "currentElectronVersion": Object {
              "source": "remote",
              "state": "ready",
              "version": "1.8.7",
            },
            "customMosaics": Array [],
            "disableTour": [MockFunction],
            "downloadVersion": [MockFunction],
            "editorMosaic": EditorMosaicMock {
              "editors": Object {
                "index.html": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "main.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "preload.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "renderer.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
              },
            },
            "environmentVariables": Array [],
            "executionFlags": Array [],
            "genericDialogLastInput": null,
            "genericDialogLastResult": null,
            "genericDialogOptions": Object {},
            "getAndRemoveEditorValueBackup": [MockFunction],
            "getName": [MockFunction],
            "gistId": "",
            "gitHubAvatarUrl": null,
            "gitHubLogin": null,
            "gitHubName": null,
            "gitHubPublishAsPublic": true,
            "gitHubToken": null,
            "hasVersion": [MockFunction],
            "hideAndBackupMosaic": [MockFunction],
            "hideChannels": [MockFunction],
            "isAddVersionDialogShowing": false,
            "isAutoBisecting": false,
            "isClearingConsoleOnRun": false,
            "isConfirmationPromptShowing": false,
            "isConsoleShowing": true,
            "isEnablingElectronLogging": false,
            "isGenericDialogShowing": false,
            "isInstallingModules": false,
            "isRunning": false,
            "isSettingsShowing": false,
            "isTokenDialogShowing": false,
            "isTourShowing": false,
            "isUsingSystemTheme": true,
            "isWarningDialogShowing": false,
            "mosaicArrangement": Object {
              "direction": "row",
              "first": Object {
                "direction": "column",
                "first": "main.js",
                "second": "renderer.js",
              },
              "second": Object {
                "direction": "column",
                "first": "preload.js",
                "second": Object {
                  "direction": "column",
                  "first": "index.html",
                  "second": "styles.css",
                },
              },
            },
            "output": Array [],
            "pushError": [MockFunction],
            "pushOutput": [MockFunction],
            "removeAcceleratorToBlock": [MockFunction],
            "removeCustomMosaic": [MockFunction],
            "removeVersion": [MockFunction],
            "setGenericDialogOptions": [MockFunction],
            "setTheme": [MockFunction],
            "setVersion": [MockFunction],
            "setVisibleMosaics": [MockFunction],
            "showChannels": [MockFunction],
            "showCustomEditorDialog": [MockFunction],
            "showMosaic": [MockFunction],
            "showUndownloadedVersions": false,
            "signOutGitHub": [MockFunction],
            "theme": undefined,
            "title": "Electron Fiddle",
            "toggleAddVersionDialog": [MockFunction],
            "toggleAuthDialog": [MockFunction],
            "toggleGenericDialog": [MockFunction],
            "toggleWarningDialog": [MockFunction],
            "updateElectronVersions": [MockFunction],
            "version": "1.8.7",
            "versions": Object {
              "1.8.7": Object {
                "source": "remote",
                "state": "ready",
                "version": "1.8.7",
              },
              "2.0.0": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.0",
              },
              "2.0.1": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.1",
              },
              "2.0.2": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.2",
              },
              "2.0.3": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.3",
              },
            },
            "versionsToShow": Array [],
          }
        }
        id="main.js"
      />
      <RemoveButton
        appState={
          StateMock {
            "Bisector": BisectorMock {
              "calculatePivot": [MockFunction],
              "continue": [MockFunction],
              "getCurrentVersion": [MockFunction],
            },
            "acceleratorsToBlock": Array [],
            "activeGistAction": "none",
            "addAcceleratorToBlock": [MockFunction],
            "addLocalVersion": [MockFunction],
            "channelsToShow": Array [],
            "clearConsole": [MockFunction],
            "closedPanels": Object {},
            "currentElectronVersion": Object {
              "source": "remote",
              "state": "ready",
              "version": "1.8.7",
            },
            "customMosaics": Array [],
            "disableTour": [MockFunction],
            "downloadVersion": [MockFunction],
            "editorMosaic": EditorMosaicMock {
              "editors": Object {
                "index.html": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "main.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "preload.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
                "renderer.js": MonacoEditorMock {
                  "action": Object {
                    "isSupported": [MockFunction],
                    "run": [MockFunction],
                  },
                  "dispose": [MockFunction],
                  "getAction": [MockFunction],
                  "getModel": [MockFunction],
                  "getValue": [MockFunction],
                  "hasTextFocus": [MockFunction],
                  "layout": [MockFunction],
                  "model": Object {
                    "getFullModelRange": [MockFunction],
                  },
                  "onDidChangeModelContent": [MockFunction],
                  "onDidFocusEditorText": [MockFunction],
                  "restoreViewState": [MockFunction],
                  "saveViewState": [MockFunction],
                  "setModel": [MockFunction],
                  "setSelection": [MockFunction],
                  "setValue": [MockFunction],
                  "updateOptions": [MockFunction],
                  "value": "",
                },
              },
            },
            "environmentVariables": Array [],
            "executionFlags": Array [],
            "genericDialogLastInput": null,
            "genericDialogLastResult": null,
            "genericDialogOptions": Object {},
            "getAndRemoveEditorValueBackup": [MockFunction],
            "getName": [MockFunction],
            "gistId": "",
            "gitHubAvatarUrl": null,
            "gitHubLogin": null,
            "gitHubName": null,
            "gitHubPublishAsPublic": true,
            "gitHubToken": null,
            "hasVersion": [MockFunction],
            "hideAndBackupMosaic": [MockFunction],
            "hideChannels": [MockFunction],
            "isAddVersionDialogShowing": false,
            "isAutoBisecting": false,
            "isClearingConsoleOnRun": false,
            "isConfirmationPromptShowing": false,
            "isConsoleShowing": true,
            "isEnablingElectronLogging": false,
            "isGenericDialogShowing": false,
            "isInstallingModules": false,
            "isRunning": false,
            "isSettingsShowing": false,
            "isTokenDialogShowing": false,
            "isTourShowing": false,
            "isUsingSystemTheme": true,
            "isWarningDialogShowing": false,
            "mosaicArrangement": Object {
              "direction": "row",
              "first": Object {
                "direction": "column",
                "first": "main.js",
                "second": "renderer.js",
              },
              "second": Object {
                "direction": "column",
                "first": "preload.js",
                "second": Object {
                  "direction": "column",
                  "first": "index.html",
                  "second": "styles.css",
                },
              },
            },
            "output": Array [],
            "pushError": [MockFunction],
            "pushOutput": [MockFunction],
            "removeAcceleratorToBlock": [MockFunction],
            "removeCustomMosaic": [MockFunction],
            "removeVersion": [MockFunction],
            "setGenericDialogOptions": [MockFunction],
            "setTheme": [MockFunction],
            "setVersion": [MockFunction],
            "setVisibleMosaics": [MockFunction],
            "showChannels": [MockFunction],
            "showCustomEditorDialog": [MockFunction],
            "showMosaic": [MockFunction],
            "showUndownloadedVersions": false,
            "signOutGitHub": [MockFunction],
            "theme": undefined,
            "title": "Electron Fiddle",
            "toggleAddVersionDialog": [MockFunction],
            "toggleAuthDialog": [MockFunction],
            "toggleGenericDialog": [MockFunction],
            "toggleWarningDialog": [MockFunction],
            "updateElectronVersions": [MockFunction],
            "version": "1.8.7",
            "versions": Object {
              "1.8.7": Object {
                "source": "remote",
                "state": "ready",
                "version": "1.8.7",
              },
              "2.0.0": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.0",
              },
              "2.0.1": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.1",
              },
              "2.0.2": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.2",
              },
              "2.0.3": Object {
                "source": "remote",
                "state": "ready",
                "version": "2.0.3",
              },
            },
            "versionsToShow": Array [],
          }
        }
        id="main.js"
      />
    </React.Fragment>
  </div>
</div>
`;
